/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M4
 * Generated at: 2016-11-14 06:51:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.controller;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import teachDB.DbBean;
import teachMail.SendMailTLS;
import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;

public final class ReserveHandler_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {



	/** SQL 值中的單引號(')需要轉化為 \'  */
	public String forSQL(String sql){
		return sql.replace("'", "\\'");
	}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.joda.time.Period");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("teachMail.SendMailTLS");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("teachDB.DbBean");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.joda.time.DateTime");
    _jspx_imports_classes.add("org.joda.time.PeriodType");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

	request.setCharacterEncoding("UTF-8");
	DbBean db = new DbBean();
	String returnMessage ="0";
	int       book_total = 0;
	String sql_status 		= (String)request.getParameter("sql_status");
	int rent_borrow_id 		= Integer.parseInt((String)request.getParameter("rent_borrow_id"));
	int book_id 			= Integer.parseInt((String)request.getParameter("book_id"));
	String book_name 		= (String)request.getParameter("book_name");
	String book_price 		= (String)request.getParameter("book_price");
	int member_id 			= Integer.parseInt((String)request.getParameter("member_id"));
	String member_name 		= (String)request.getParameter("member_name");
	String member_email 	= (String)request.getParameter("member_email");
	DateTime realtime 		= new DateTime();
	DateTime deadlinetime   = realtime.plusDays(7);
			List bookidList = new ArrayList();
			bookidList.add(book_id);
			List checkbookList = db.SelectRSwhere(" select * from book  where book_id = ?  ",bookidList);
			if(checkbookList != null && checkbookList.size() > 0){
					for(int i=0;i<checkbookList.size();i++){
						Map map = (Map) checkbookList.get(i);
						book_total   	=(Integer) map.get( "book_total");
				}
			}
			if(book_total == 0 && sql_status.equals("insert")){
				returnMessage = "5";
			}

			if(!returnMessage.equals("5")){
					List insertList   = new ArrayList();
					String insertSql  = "";
					if(sql_status.equals("insert")){
						insertList.add(member_id);
						insertList.add(book_id);
						insertList.add(realtime.toString("yyyy-MM-dd"));
						insertList.add(deadlinetime.toString("yyyy-MM-dd"));
						insertSql  = "insert into borrow_record ( member_id,book_id, reserve_date, reserve_deadline) ";
						insertSql += "VALUES (?,?,?,?)";
					}else if(sql_status.equals("delete")){
						insertList.add(rent_borrow_id);
						insertSql  = "delete from borrow_record where borrow_id = ? ";
					}
					int result = db.InsertData(insertSql, insertList);
					if(result == 1){
						List minusList = new ArrayList();
						if(sql_status.equals("insert")){
							minusList.add(book_total - 1);
						}else if(sql_status.equals("delete")){
							minusList.add(book_total + 1);
						}							
						minusList.add(realtime.toString("yyyy-MM-dd"));
						minusList.add(book_id);
						String booktotalSql  = "update book set book_total = ?,updatetime = ? where book_id = ? ";
						int totalresult = db.InsertData(booktotalSql, minusList);
						if(totalresult == 1){
								SendMailTLS mail = new SendMailTLS();
								
								List<String> mailcontect = new ArrayList<String>();
								if(sql_status.equals("insert")){
									mailcontect.add(member_name);
									mailcontect.add(book_name);
									mailcontect.add(book_price);
									mailcontect.add(realtime.toString("yyyy-MM-dd"));
									mailcontect.add(deadlinetime.toString("yyyy-MM-dd"));
								}else if(sql_status.equals("delete")){
									mailcontect.add(member_name);
									mailcontect.add(book_name);
									mailcontect.add(realtime.toString("yyyy-MM-dd"));
								}
							boolean check = false;	
							if(sql_status.equals("insert")){
								check =	mail.sendmail( member_email + ",ed01039639@gmail.com", "天天學桌遊--租書通知(" + member_name +")", mailcontect,2);
							}else if(sql_status.equals("delete")){
								check =	mail.sendmail( member_email + ",ed01039639@gmail.com", "天天學桌遊--取消預約通知(" + member_name +")", mailcontect,5);
							}								
								if(check)
									returnMessage = "2";
								else
									returnMessage = "3";
						}else{
							returnMessage = "4";
						}
					}else{
						returnMessage = "1";
					}
			}
	out.println(returnMessage);

      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
