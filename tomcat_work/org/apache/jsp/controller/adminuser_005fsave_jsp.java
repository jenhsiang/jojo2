/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M4
 * Generated at: 2016-06-07 03:21:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.controller;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import teachDB.DbBean;

public final class adminuser_005fsave_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


		public boolean checkReq(Object obj){
			boolean check = false ;
			if(obj != null && !((String)obj).equals("")){
				check = true;
			}
			return check;
		}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("teachDB.DbBean");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

	request.setCharacterEncoding("UTF-8");
	int a_idx = 0,admin = 0,check_data = 0,result = 0;
	String a_userid ="",a_username = "",a_passwd = "",a_userphone = "",a_email = "",updateSql = "",msg = "",status="";
	List updateList = null;
	Date updateNow = new Date();
	Calendar Cal= Calendar.getInstance();   
	Cal.setTime(updateNow);   
	Cal.add(Calendar.HOUR_OF_DAY,8);   
	Date realtime = Cal.getTime();
	DbBean db = new DbBean();
	if(checkReq(request.getParameter("a_userid")) && checkReq(request.getParameter("a_username"))  
		&& checkReq(request.getParameter("a_passwd")) && checkReq(request.getParameter("a_userphone"))
		&& checkReq(request.getParameter("a_email"))  && checkReq(request.getParameter("admin")) ){
			a_userid = (String)request.getParameter("a_userid");
			a_username = (String)request.getParameter("a_username");
			a_passwd = (String)request.getParameter("a_passwd");
			a_userphone = (String)request.getParameter("a_userphone");
			a_email = (String)request.getParameter("a_email");
			admin = Integer.parseInt((String)request.getParameter("admin"));
				if(checkReq(request.getParameter("a_idx")) ){
					a_idx = Integer.parseInt((String)request.getParameter("a_idx"));
					List checkList = new ArrayList();
					checkList.add(a_userid);
					checkList.add(a_idx);
		         	List repeatList = db.SelectRSwhere("select * from adminuser where deleteflag = 0 and a_userid = ? and a_idx != ?  ",checkList);
					if(repeatList.size() > 0){
						result = 2;
					}else{
						check_data = 2;
					}
				}else{
					List checkList = new ArrayList();
					checkList.add(a_userid);
		         	List repeatList = db.SelectRSwhere("select * from adminuser where deleteflag = 0 and a_userid = ?  ",checkList);
					if(repeatList.size() > 0){
						result = 2;
					}else{
						check_data = 1;
					 	List deleteList = db.SelectRS("select min(a_idx) as minidx from adminuser where deleteflag = 1  ");
				     	if(deleteList.size()>0){
				    		 for(int i=0;i<deleteList.size();i++){
								Map map = (Map) deleteList.get(i);
								if(map.get("minidx") != null){
									check_data = 3;
									a_idx = (Integer)map.get("minidx");
								}
							}
				     	}
					}
				}
					
	}
	switch(check_data) { 
    case 3: 
    	 updateList = new ArrayList();
		 updateList.add(a_userid);
		 updateList.add(a_username);
		 updateList.add(a_passwd);
		 updateList.add(a_userphone);
		 updateList.add(a_email);
		 updateList.add(admin);
		 updateList.add(realtime);
		 updateList.add(realtime);
		 updateList.add(a_idx);
		  updateSql   = "update adminuser set a_userid = ? ,a_username = ? , a_passwd = ? ,a_userphone = ? ";
		  updateSql  += "   ,a_email = ? , admin = ? ,createtime = ?,updatetime = ? ,deleteflag = 0 where  a_idx = ? ";
		  result = db.InsertData(updateSql, updateList); 
		  status = "新增";
        break; 
    case 2: 
    	 updateList = new ArrayList();
		 updateList.add(a_userid);
		 updateList.add(a_username);
		 updateList.add(a_passwd);
		 updateList.add(a_userphone);
		 updateList.add(a_email);
		 updateList.add(admin);
		 updateList.add(realtime);
		 updateList.add(a_idx);
		  updateSql   = "update adminuser set a_userid = ? ,a_username = ? , a_passwd = ? ,a_userphone = ? ";
		  updateSql  += "   ,a_email = ? , admin = ? ,updatetime = ? where  a_idx = ? ";
		  result = db.InsertData(updateSql, updateList);
		  status = "修改";
        break; 
    case 1: 
    	updateList = new ArrayList();
		 updateList.add(a_userid);
		 updateList.add(a_username);
		 updateList.add(a_passwd);
		 updateList.add(a_userphone);
		 updateList.add(a_email);
		 updateList.add(admin);
		 updateList.add(realtime);
		 updateList.add(realtime);
		  updateSql   = " insert into adminuser (a_userid,a_username,a_passwd,a_userphone,a_email,admin,createtime,updatetime,deleteflag) ";
		  updateSql  += " values(?,?,?,?,?,?,?,?,0) ";
		  result = db.InsertData(updateSql, updateList);
		  status = "新增";
        break;          
	}
	switch(result) { 
    case 2: 
    	msg = "帳號" + a_userid  +"已存在，請重新輸入" ;
        break; 
    case 1: 
    	msg = "帳號" + a_userid + status +"成功" ;
        break; 
    default: 
    	msg = "帳號" + a_userid + status +"失敗" ; 
	}
		
	out.print("{\"success\":"+result);
	out.print(",\"msg\":\""+msg+"\"");
	out.print("}");

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
