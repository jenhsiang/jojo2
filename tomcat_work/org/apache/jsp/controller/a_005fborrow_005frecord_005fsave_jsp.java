/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M4
 * Generated at: 2016-11-09 15:36:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.controller;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import teachDB.DbBean;
import teachMail.SendMailTLS;
import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;

public final class a_005fborrow_005frecord_005fsave_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


		public boolean checkReq(Object obj){
			boolean check = false ;
			if(obj != null && !((String)obj).equals("")){
				check = true;
			}
			return check;
		}

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.joda.time.Period");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("teachMail.SendMailTLS");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("teachDB.DbBean");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("org.joda.time.DateTime");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.text.ParseException");
    _jspx_imports_classes.add("org.joda.time.PeriodType");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write('\n');

	request.setCharacterEncoding("UTF-8");
if(session.getAttribute ("sesAdminID") != null && !session.getAttribute ("sesAdminID").equals ( "" )){
	String a_userid = (String)session.getAttribute ("sesAdminID");
	int seqnum = -1,borrow_id = 0,book_id = 0,real_fine = 0,book_total = 0,result = 0;
	String new_action = "",book_name = "",member_account = "",member_name = "",member_email = "",updateSql = "",msg = "",msg_act = "",returnMessage = "0";
	List updateList = null;
	DateTime realtime       = new DateTime();
	DateTime deadlinetime   = realtime.plusDays(7);
	DbBean db = new DbBean();
	if(checkReq(request.getParameter("borrow_id")) && checkReq(request.getParameter("new_action"))
		 && checkReq(request.getParameter("book_name")) && checkReq(request.getParameter("book_id")) 
		 && checkReq(request.getParameter("member_name")) && checkReq(request.getParameter("member_email"))
		  && checkReq(request.getParameter("member_account")) && checkReq(request.getParameter("real_fine"))){
			borrow_id 	   = Integer.parseInt((String)request.getParameter("borrow_id"));
			book_id 	   = Integer.parseInt((String)request.getParameter("book_id"));
			real_fine 	   = Integer.parseInt((String)request.getParameter("real_fine"));
			new_action 	   = (String)request.getParameter("new_action");
			book_name 	   = (String)request.getParameter("book_name");
			member_name    = (String)request.getParameter("member_name");
			member_email   = (String)request.getParameter("member_email");
			member_account = (String)request.getParameter("member_account");
			if(checkReq(request.getParameter("seqnum"))){
				seqnum = Integer.parseInt((String)request.getParameter("seqnum"));
			}	
			
			List bookidList = new ArrayList();
			bookidList.add(book_id);
			List checkbookList = db.SelectRSwhere(" select * from book  where book_id = ?  ",bookidList);
			if(checkbookList != null && checkbookList.size() > 0){
					for(int i=0;i<checkbookList.size();i++){
						Map map = (Map) checkbookList.get(i);
						book_total   	=(Integer) map.get( "book_total");
				}
			}
			
				updateList = new ArrayList();
				if(new_action.equals("getbook")){
					updateSql   = " update borrow_record set borrow_date = ? ,borrow_deadline = ? ,a_userid = ? where  borrow_id = ?  ";
				
					updateList.add(realtime.toString("yyyy-MM-dd"));
					updateList.add(deadlinetime.toString("yyyy-MM-dd"));
					updateList.add(a_userid);
					updateList.add(borrow_id);
					msg_act = "取書";
				}else if(new_action.equals("returnbook")) {
					updateSql   = " update borrow_record set return_date = ?  ,a_userid = ? where  borrow_id = ?  ";
				
					updateList.add(realtime.toString("yyyy-MM-dd"));
					updateList.add(a_userid);
					updateList.add(borrow_id);
					msg_act = "還書";
				}else if(new_action.equals("paybook") && real_fine > 0) {
					updateSql   = " update borrow_record set return_date = ?  ,fine = ?  ,givefine = ?  ,a_userid = ? where  borrow_id = ?  ";
				
					updateList.add(realtime.toString("yyyy-MM-dd"));
					updateList.add(real_fine);
					updateList.add(1);
					updateList.add(a_userid);
					updateList.add(borrow_id);
					msg_act = "付罰金";
				}
			result = db.InsertData(updateSql, updateList);
			if(result == 1 && (new_action.equals("returnbook") || new_action.equals("paybook"))){
				List minusList = new ArrayList();
						minusList.add(book_total + 1);							
						minusList.add(realtime.toString("yyyy-MM-dd"));
						minusList.add(book_id);
						String booktotalSql  = "update book set book_total = ?,updatetime = ? where book_id = ? ";
				result = db.InsertData(booktotalSql, minusList);
			}
			 
			  returnMessage = Integer.toString(result);
			  if(result == 1) {  
						SendMailTLS mail = new SendMailTLS();
								
								List<String> mailcontect = new ArrayList<String>();
								if(new_action.equals("getbook")){
									mailcontect.add(member_name);
									mailcontect.add(book_name);
									mailcontect.add(realtime.toString("yyyy-MM-dd"));
									mailcontect.add(deadlinetime.toString("yyyy-MM-dd"));
								}else if(new_action.equals("returnbook")){
									mailcontect.add(member_name);
									mailcontect.add(book_name);
									mailcontect.add(realtime.toString("yyyy-MM-dd"));
								}else if(new_action.equals("paybook")){
									mailcontect.add(member_name);
									mailcontect.add(book_name);
									mailcontect.add(Integer.toString(real_fine));
									mailcontect.add(realtime.toString("yyyy-MM-dd"));
								}
								
							boolean check = false;	
							if(new_action.equals("getbook")){
								check =	mail.sendmail( member_email + ",ed01039639@gmail.com", "看啥租啥--取書通知(" + member_name +")", mailcontect,6);
							}else if(new_action.equals("returnbook")){
								check =	mail.sendmail( member_email + ",ed01039639@gmail.com", "看啥租啥--還書通知(" + member_name +")", mailcontect,7);
							}else if(new_action.equals("paybook")){
								check =	mail.sendmail( member_email + ",ed01039639@gmail.com", "看啥租啥--已付罰金通知(" + member_name +")", mailcontect,8);
							}
							
							if(check)
									returnMessage = "2";
								else
									returnMessage = "3";		
				}
				msg = "會員帳號:『" + member_account +"』,書籍名稱:『" + book_name +"』";
				if(returnMessage.equals("2")){
					msg +=  msg_act +"成功" ;
				}else{
					msg +=  msg_act +"失敗" ;
				}
			
	}
	
	out.print("{\"success\":\"" + returnMessage +"\"");
	out.print(",\"msg\":\""+msg+"\"");
	out.print(",\"borrow_id\":\""+borrow_id+"\"");
	out.print(",\"seqnum\":"+seqnum);
	out.print("}");
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
